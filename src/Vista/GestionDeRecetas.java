package Vista;

import Gui.DataCombo;
import Gui.LienzoDeVentana;
import Modelo.ConexionBd.IngredienteBd;
import Modelo.ConexionBd.MezclaDeProductosBd;
import Modelo.ConexionBd.ProductoBd;
import Modelo.ConexionBd.RecetaBd;
import Modelo.ConexionBd.UnidadDeMedidaBd;
import Modelo.Entidades.Ingrediente;
import Modelo.Entidades.MezclaDeProductos;
import Modelo.Entidades.Producto;
import Modelo.Entidades.Receta;
import Modelo.Entidades.UnidadDeMedida;
import Modelo.Excepcion.EntidadNoExisteException;
import Modelo.Excepcion.EntidadYaExisteException;
import java.awt.Dimension;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.Toolkit;
import java.math.BigDecimal;
import java.util.Iterator;
import java.util.List;
import java.util.TreeSet;
import javax.persistence.EntityManager;
import javax.swing.JOptionPane;

public class GestionDeRecetas extends javax.swing.JFrame {

    private EntityManager em;
    private ModeloDeTabla modeloUni, modeloIng, modeloPro, modeloRec, modeloMez;

    /**
     * Creates new form Componentes
     */
    public GestionDeRecetas(EntityManager em) {
        this.em = em;
        String nombreImagen = "/Recursos/FondoBueno.jpg";
        Image ima;
        ima = Toolkit.getDefaultToolkit().
                getImage(getClass().getResource(nombreImagen));
        LienzoDeVentana lienzo = new LienzoDeVentana("/Recursos/FondoBueno.jpg");
        setContentPane(lienzo);
        initComponents();
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        campoDoble2 = new Gui.CampoDoble("Precio", 8);
        jPanel9 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        pestanas = new javax.swing.JTabbedPane();
        panelNombre = new javax.swing.JPanel();
        botonIncluirUni = new javax.swing.JButton();
        botonModificarUni = new javax.swing.JButton();
        botonEliminarUni = new javax.swing.JButton();
        botonSalirUni = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaDeUnidades = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        nombreUnidad = new Gui.CampoTexto(30);
        jPanel2 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        nombreIngrediente = new Gui.CampoTexto(30);
        jPanel7 = new javax.swing.JPanel();
        comboUnidadMedida = new Gui.ComboDatos();
        botonSalirIng = new javax.swing.JButton();
        botonEliminarIng = new javax.swing.JButton();
        botonModificarIng = new javax.swing.JButton();
        botonIncluirIng = new javax.swing.JButton();
        jScrollPane8 = new javax.swing.JScrollPane();
        tablaIngredientes = new javax.swing.JTable();
        jPanel12 = new javax.swing.JPanel();
        precioIng = new Gui.CampoDoble("Costo", 8);
        jPanel3 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        nombreProducto = new Gui.CampoTexto(30);
        jPanel11 = new javax.swing.JPanel();
        comboUnidad = new Gui.ComboDatos();
        botonSalirPro = new javax.swing.JButton();
        botonEliminarPro = new javax.swing.JButton();
        botonModificarPro = new javax.swing.JButton();
        botonIncluirPro = new javax.swing.JButton();
        jScrollPane7 = new javax.swing.JScrollPane();
        jScrollPane5 = new javax.swing.JScrollPane();
        procedimiento = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        tablaProducto = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jPanel15 = new javax.swing.JPanel();
        comboIngredientesRec = new Gui.ComboDatos();
        botonSalirReceta = new javax.swing.JButton();
        botonEliminarRec = new javax.swing.JButton();
        botonModificarRec = new javax.swing.JButton();
        botonIncluirRec = new javax.swing.JButton();
        jScrollPane9 = new javax.swing.JScrollPane();
        tablaReceta = new javax.swing.JTable();
        jPanel17 = new javax.swing.JPanel();
        comboProductosRec = new Gui.ComboDatos();
        cantidadIng = new Gui.CampoDoble("Cantidad", 8);
        rendimientoRec = new Gui.CampoDoble("Rend%", 6);
        jPanel14 = new javax.swing.JPanel();
        jPanel16 = new javax.swing.JPanel();
        jPanel18 = new javax.swing.JPanel();
        comboComponentes = new Gui.ComboDatos();
        botonSalirMez = new javax.swing.JButton();
        botonEliminarMez = new javax.swing.JButton();
        botonModificarMez = new javax.swing.JButton();
        botonIncluirMez = new javax.swing.JButton();
        jScrollPane10 = new javax.swing.JScrollPane();
        tablaMezcla = new javax.swing.JTable();
        jPanel19 = new javax.swing.JPanel();
        comboProductosMezcla = new Gui.ComboDatos();
        cantidadComponente = new Gui.CampoDoble("Cantidad", 6);
        jPanel20 = new javax.swing.JPanel();
        redmtoCom = new Gui.CampoDoble("Rdmto%", 6);

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 877, Short.MAX_VALUE)
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 535, Short.MAX_VALUE)
        );

        jTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Ingrediente", "Precio", "Unidad de Medida", "idIngrediente", "idUnidadDeMedida"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Double.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable4.getTableHeader().setReorderingAllowed(false);
        jScrollPane6.setViewportView(jTable4);
        jTable4.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (jTable4.getColumnModel().getColumnCount() > 0) {
            jTable4.getColumnModel().getColumn(0).setMinWidth(300);
            jTable4.getColumnModel().getColumn(0).setMaxWidth(300);
            jTable4.getColumnModel().getColumn(1).setMinWidth(300);
            jTable4.getColumnModel().getColumn(1).setMaxWidth(300);
            jTable4.getColumnModel().getColumn(2).setMinWidth(300);
            jTable4.getColumnModel().getColumn(2).setMaxWidth(300);
            jTable4.getColumnModel().getColumn(3).setMinWidth(0);
            jTable4.getColumnModel().getColumn(3).setMaxWidth(0);
            jTable4.getColumnModel().getColumn(4).setMinWidth(0);
            jTable4.getColumnModel().getColumn(4).setMaxWidth(0);
        }

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Gestion de Recetas");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        pestanas.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                pestanasStateChanged(evt);
            }
        });

        panelNombre.setOpaque(false);

        botonIncluirUni.setFont(new java.awt.Font("Umpush", 1, 19)); // NOI18N
        botonIncluirUni.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/AgregarIcono.png"))); // NOI18N
        botonIncluirUni.setToolTipText("Agregar una  nueva entidad");
        botonIncluirUni.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonIncluirUniActionPerformed(evt);
            }
        });

        botonModificarUni.setFont(new java.awt.Font("Umpush", 1, 19)); // NOI18N
        botonModificarUni.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/ModificarIcono.png"))); // NOI18N
        botonModificarUni.setToolTipText("Modificar entidad banccaria seleccionada de la lista");
        botonModificarUni.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonModificarUniActionPerformed(evt);
            }
        });

        botonEliminarUni.setFont(new java.awt.Font("Umpush", 1, 19)); // NOI18N
        botonEliminarUni.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/EliminarIcono.png"))); // NOI18N
        botonEliminarUni.setToolTipText("Eliminar entidad seleccionada de la lista");
        botonEliminarUni.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEliminarUniActionPerformed(evt);
            }
        });

        botonSalirUni.setFont(new java.awt.Font("Umpush", 1, 19)); // NOI18N
        botonSalirUni.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/SalirIcono.png"))); // NOI18N
        botonSalirUni.setToolTipText("Cerrar gestion de entidades bancarias");
        botonSalirUni.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonSalir(evt);
            }
        });

        String [] nomColUni = {"Unidad de Medida", ""};
        Class[] typesUni = {java.lang.String.class, java.lang.Integer.class};
        modeloUni = new ModeloDeTabla(nomColUni, typesUni);
        tablaDeUnidades.setModel(modeloUni);
        tablaDeUnidades.setPreferredScrollableViewportSize(new Dimension(200,200));
        tablaDeUnidades.getColumnModel().getColumn(0).setMinWidth(300);
        tablaDeUnidades.getColumnModel().getColumn(0).setMaxWidth(300);
        tablaDeUnidades.getColumnModel().getColumn(1).setMinWidth(0);
        tablaDeUnidades.getColumnModel().getColumn(1).setMaxWidth(0);
        tablaDeUnidades.setModel(modeloUni);
        tablaDeUnidades.getTableHeader().setResizingAllowed(false);
        tablaDeUnidades.getTableHeader().setReorderingAllowed(false);
        tablaDeUnidades.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaDeUnidadesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablaDeUnidades);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Nombre de la Unidad"));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(nombreUnidad, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(nombreUnidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 458, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout panelNombreLayout = new javax.swing.GroupLayout(panelNombre);
        panelNombre.setLayout(panelNombreLayout);
        panelNombreLayout.setHorizontalGroup(
            panelNombreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelNombreLayout.createSequentialGroup()
                .addContainerGap(542, Short.MAX_VALUE)
                .addGroup(panelNombreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelNombreLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelNombreLayout.createSequentialGroup()
                        .addComponent(botonIncluirUni)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botonModificarUni)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botonEliminarUni)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botonSalirUni)))
                .addGap(331, 331, 331))
        );
        panelNombreLayout.setVerticalGroup(
            panelNombreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelNombreLayout.createSequentialGroup()
                .addContainerGap(25, Short.MAX_VALUE)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelNombreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(botonEliminarUni)
                    .addComponent(botonSalirUni)
                    .addGroup(panelNombreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(botonIncluirUni)
                        .addComponent(botonModificarUni)))
                .addContainerGap())
        );

        pestanas.addTab("Unidad de Medida", panelNombre);

        jPanel2.setOpaque(false);

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Nombre del Ingrediente"));

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(nombreIngrediente, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(nombreIngrediente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Unidad de Medida"));

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addComponent(comboUnidadMedida, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(comboUnidadMedida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        botonSalirIng.setFont(new java.awt.Font("Umpush", 1, 19)); // NOI18N
        botonSalirIng.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/SalirIcono.png"))); // NOI18N
        botonSalirIng.setToolTipText("Cerrar gestion de entidades bancarias");
        botonSalirIng.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonSalir(evt);
            }
        });

        botonEliminarIng.setFont(new java.awt.Font("Umpush", 1, 19)); // NOI18N
        botonEliminarIng.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/EliminarIcono.png"))); // NOI18N
        botonEliminarIng.setToolTipText("Eliminar entidad seleccionada de la lista");
        botonEliminarIng.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEliminarIngActionPerformed(evt);
            }
        });

        botonModificarIng.setFont(new java.awt.Font("Umpush", 1, 19)); // NOI18N
        botonModificarIng.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/ModificarIcono.png"))); // NOI18N
        botonModificarIng.setToolTipText("Modificar entidad banccaria seleccionada de la lista");
        botonModificarIng.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonModificarIngActionPerformed(evt);
            }
        });

        botonIncluirIng.setFont(new java.awt.Font("Umpush", 1, 19)); // NOI18N
        botonIncluirIng.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/AgregarIcono.png"))); // NOI18N
        botonIncluirIng.setToolTipText("Agregar una  nueva entidad");
        botonIncluirIng.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonIncluirIngActionPerformed(evt);
            }
        });

        String [] nomColIn = {"Ingrediente", "Precio", "Unidad","",""};
        Class[] typesIn = {java.lang.String.class, java.lang.Double.class,
            java.lang.String.class, java.lang.Integer.class,
            java.lang.Integer.class};
        modeloIng = new ModeloDeTabla(nomColIn, typesIn);
        tablaIngredientes.setPreferredScrollableViewportSize(new Dimension(200,200));
        tablaIngredientes.setModel(modeloIng);
        tablaIngredientes.getColumnModel().getColumn(0).setMinWidth(300);
        tablaIngredientes.getColumnModel().getColumn(0).setMaxWidth(300);
        tablaIngredientes.getColumnModel().getColumn(1).setMinWidth(80);
        tablaIngredientes.getColumnModel().getColumn(1).setMaxWidth(80);
        tablaIngredientes.getColumnModel().getColumn(2).setMinWidth(100);
        tablaIngredientes.getColumnModel().getColumn(2).setMaxWidth(100);
        tablaIngredientes.getColumnModel().getColumn(3).setMinWidth(0);
        tablaIngredientes.getColumnModel().getColumn(3).setMaxWidth(0);
        tablaIngredientes.getColumnModel().getColumn(4).setMinWidth(0);
        tablaIngredientes.getColumnModel().getColumn(4).setMaxWidth(0);

        tablaIngredientes.setColumnSelectionAllowed(true);

        tablaIngredientes.getTableHeader().setReorderingAllowed(false);

        tablaIngredientes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaIngredientesMouseClicked(evt);
            }
        });
        tablaIngredientes.setModel(modeloIng);
        tablaIngredientes.setColumnSelectionAllowed(false);
        tablaIngredientes.getTableHeader().setReorderingAllowed(false);
        tablaIngredientes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaIngredientesMouseClicked(evt);
            }
        });
        jScrollPane8.setViewportView(tablaIngredientes);
        tablaIngredientes.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        precioIng.setBorder(javax.swing.BorderFactory.createTitledBorder("Precio"));

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(precioIng, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(precioIng, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(166, 166, 166)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(111, 111, 111)
                                .addComponent(botonIncluirIng)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(botonModificarIng)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(botonEliminarIng)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(botonSalirIng))
                            .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 488, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(337, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(34, 34, 34)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 369, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 64, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(botonEliminarIng)
                    .addComponent(botonSalirIng)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(botonIncluirIng)
                        .addComponent(botonModificarIng)))
                .addContainerGap())
        );

        pestanas.addTab("Ingrediente", jPanel2);

        jPanel8.setOpaque(false);

        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder("Nombre del Producto"));

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(nombreProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(nombreProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder("Unidad de Medida"));

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                .addComponent(comboUnidad, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(comboUnidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        botonSalirPro.setFont(new java.awt.Font("Umpush", 1, 19)); // NOI18N
        botonSalirPro.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/SalirIcono.png"))); // NOI18N
        botonSalirPro.setToolTipText("Cerrar gestion de entidades bancarias");
        botonSalirPro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonSalir(evt);
            }
        });

        botonEliminarPro.setFont(new java.awt.Font("Umpush", 1, 19)); // NOI18N
        botonEliminarPro.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/EliminarIcono.png"))); // NOI18N
        botonEliminarPro.setToolTipText("Eliminar entidad seleccionada de la lista");
        botonEliminarPro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEliminarProActionPerformed(evt);
            }
        });

        botonModificarPro.setFont(new java.awt.Font("Umpush", 1, 19)); // NOI18N
        botonModificarPro.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/ModificarIcono.png"))); // NOI18N
        botonModificarPro.setToolTipText("Modificar entidad banccaria seleccionada de la lista");
        botonModificarPro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonModificarProActionPerformed(evt);
            }
        });

        botonIncluirPro.setFont(new java.awt.Font("Umpush", 1, 19)); // NOI18N
        botonIncluirPro.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/AgregarIcono.png"))); // NOI18N
        botonIncluirPro.setToolTipText("Agregar una  nueva entidad");
        botonIncluirPro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonIncluirProActionPerformed(evt);
            }
        });

        jScrollPane5.setBorder(javax.swing.BorderFactory.createTitledBorder("Procedimiento de Elaboracion"));

        procedimiento.setColumns(20);
        procedimiento.setLineWrap(true);
        procedimiento.setRows(5);
        jScrollPane5.setViewportView(procedimiento);

        jScrollPane7.setViewportView(jScrollPane5);

        String [] nomColPr = {"Producto", "Elaboracion", "Unidad","",""};
        Class[] typesPr = {java.lang.String.class, java.lang.String.class,
            java.lang.String.class, java.lang.Integer.class,
            java.lang.Integer.class};
        modeloPro = new ModeloDeTabla(nomColPr, typesPr);
        tablaProducto.setPreferredScrollableViewportSize(new Dimension(200,200));
        tablaProducto.setModel(modeloPro);
        tablaProducto.getColumnModel().getColumn(0).setMinWidth(300);
        tablaProducto.getColumnModel().getColumn(0).setMaxWidth(300);
        tablaProducto.getColumnModel().getColumn(1).setMinWidth(500);
        tablaProducto.getColumnModel().getColumn(1).setMaxWidth(500);
        tablaProducto.getColumnModel().getColumn(2).setMinWidth(100);
        tablaProducto.getColumnModel().getColumn(2).setMaxWidth(100);
        tablaProducto.getColumnModel().getColumn(3).setMinWidth(0);
        tablaProducto.getColumnModel().getColumn(3).setMaxWidth(0);
        tablaProducto.getColumnModel().getColumn(4).setMinWidth(0);
        tablaProducto.getColumnModel().getColumn(4).setMaxWidth(0);
        tablaProducto.setModel(modeloPro);
        tablaProducto.getTableHeader().setReorderingAllowed(false);
        tablaProducto.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaProductoMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tablaProducto);

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(botonIncluirPro)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botonModificarPro)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botonEliminarPro)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botonSalirPro)
                .addGap(310, 310, 310))
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 926, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(21, Short.MAX_VALUE))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 545, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14))))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 365, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(botonEliminarPro)
                    .addComponent(botonSalirPro)
                    .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(botonIncluirPro)
                        .addComponent(botonModificarPro))))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pestanas.addTab("Producto", jPanel3);

        jPanel5.setOpaque(false);

        jPanel13.setOpaque(false);

        jPanel15.setBorder(javax.swing.BorderFactory.createTitledBorder("Ingrediente"));
        jPanel15.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
                jPanel15CaretPositionChanged(evt);
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
            }
        });

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(comboIngredientesRec, javax.swing.GroupLayout.DEFAULT_SIZE, 322, Short.MAX_VALUE)
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(comboIngredientesRec, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        botonSalirReceta.setFont(new java.awt.Font("Umpush", 1, 19)); // NOI18N
        botonSalirReceta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/SalirIcono.png"))); // NOI18N
        botonSalirReceta.setToolTipText("Cerrar gestion de entidades bancarias");
        botonSalirReceta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonSalir(evt);
            }
        });

        botonEliminarRec.setFont(new java.awt.Font("Umpush", 1, 19)); // NOI18N
        botonEliminarRec.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/EliminarIcono.png"))); // NOI18N
        botonEliminarRec.setToolTipText("Eliminar entidad seleccionada de la lista");
        botonEliminarRec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEliminarRecActionPerformed(evt);
            }
        });

        botonModificarRec.setFont(new java.awt.Font("Umpush", 1, 19)); // NOI18N
        botonModificarRec.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/ModificarIcono.png"))); // NOI18N
        botonModificarRec.setToolTipText("Modificar entidad banccaria seleccionada de la lista");
        botonModificarRec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonModificarRecActionPerformed(evt);
            }
        });

        botonIncluirRec.setFont(new java.awt.Font("Umpush", 1, 19)); // NOI18N
        botonIncluirRec.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/AgregarIcono.png"))); // NOI18N
        botonIncluirRec.setToolTipText("Agregar una  nueva entidad");
        botonIncluirRec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonIncluirRecActionPerformed(evt);
            }
        });

        String [] nomColRec = {"Producto", "Ingrediente", "Cantidad", "Unidad", "Rend%",
            "", "", "", ""};
        Class[] typesRec = {java.lang.String.class, java.lang.String.class,
            java.lang.Double.class, java.lang.String.class,
            java.lang.Double.class, java.lang.Integer.class,
            java.lang.Integer.class, java.lang.Integer.class,
            java.lang.Integer.class};
        modeloRec = new ModeloDeTabla(nomColRec, typesRec);
        tablaReceta.setPreferredScrollableViewportSize(new Dimension(200,200));
        tablaReceta.setModel(modeloRec);
        tablaReceta.getColumnModel().getColumn(0).setMinWidth(300);
        tablaReceta.getColumnModel().getColumn(0).setMaxWidth(300);
        tablaReceta.getColumnModel().getColumn(1).setMinWidth(300);
        tablaReceta.getColumnModel().getColumn(1).setMaxWidth(300);
        tablaReceta.getColumnModel().getColumn(2).setMinWidth(80);
        tablaReceta.getColumnModel().getColumn(2).setMaxWidth(80);
        tablaReceta.getColumnModel().getColumn(3).setMinWidth(200);
        tablaReceta.getColumnModel().getColumn(3).setMaxWidth(200);
        tablaReceta.getColumnModel().getColumn(4).setMinWidth(80);
        tablaReceta.getColumnModel().getColumn(4).setMaxWidth(80);
        tablaReceta.getColumnModel().getColumn(5).setMinWidth(0);
        tablaReceta.getColumnModel().getColumn(5).setMaxWidth(0);
        tablaReceta.getColumnModel().getColumn(6).setMinWidth(0);
        tablaReceta.getColumnModel().getColumn(6).setMaxWidth(0);
        tablaReceta.getColumnModel().getColumn(7).setMinWidth(0);
        tablaReceta.getColumnModel().getColumn(7).setMaxWidth(0);
        tablaReceta.getColumnModel().getColumn(8).setMinWidth(0);
        tablaReceta.getColumnModel().getColumn(8).setMaxWidth(0);
        tablaReceta.setModel(modeloRec);
        tablaReceta.getTableHeader().setReorderingAllowed(false);
        tablaReceta.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaRecetaMouseClicked(evt);
            }
        });
        jScrollPane9.setViewportView(tablaReceta);

        jPanel17.setBorder(javax.swing.BorderFactory.createTitledBorder("Producto"));

        javax.swing.GroupLayout jPanel17Layout = new javax.swing.GroupLayout(jPanel17);
        jPanel17.setLayout(jPanel17Layout);
        jPanel17Layout.setHorizontalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addComponent(comboProductosRec, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 6, Short.MAX_VALUE))
        );
        jPanel17Layout.setVerticalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(comboProductosRec, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE))
        );

        cantidadIng.setMaxCantDigitos(8);

        rendimientoRec.setMaxCantDigitos(6);

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel13Layout.createSequentialGroup()
                        .addGap(345, 345, 345)
                        .addComponent(botonIncluirRec)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botonModificarRec)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botonEliminarRec)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botonSalirReceta))
                    .addGroup(jPanel13Layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel13Layout.createSequentialGroup()
                                .addComponent(jPanel17, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cantidadIng, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rendimientoRec, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 943, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(0, 48, Short.MAX_VALUE))
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel17, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel15, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rendimientoRec, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cantidadIng, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 440, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(botonEliminarRec)
                    .addComponent(botonSalirReceta)
                    .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(botonIncluirRec)
                        .addComponent(botonModificarRec)))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(135, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pestanas.addTab("Receta", jPanel5);

        jPanel16.setOpaque(false);

        jPanel18.setBorder(javax.swing.BorderFactory.createTitledBorder("Componente"));

        javax.swing.GroupLayout jPanel18Layout = new javax.swing.GroupLayout(jPanel18);
        jPanel18.setLayout(jPanel18Layout);
        jPanel18Layout.setHorizontalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel18Layout.createSequentialGroup()
                .addComponent(comboComponentes, javax.swing.GroupLayout.DEFAULT_SIZE, 356, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel18Layout.setVerticalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel18Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(comboComponentes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        botonSalirMez.setFont(new java.awt.Font("Umpush", 1, 19)); // NOI18N
        botonSalirMez.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/SalirIcono.png"))); // NOI18N
        botonSalirMez.setToolTipText("Cerrar gestion de entidades bancarias");
        botonSalirMez.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                botonSalirMezComponentShown(evt);
            }
        });
        botonSalirMez.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonSalir(evt);
            }
        });

        botonEliminarMez.setFont(new java.awt.Font("Umpush", 1, 19)); // NOI18N
        botonEliminarMez.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/EliminarIcono.png"))); // NOI18N
        botonEliminarMez.setToolTipText("Eliminar entidad seleccionada de la lista");
        botonEliminarMez.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEliminarMezActionPerformed(evt);
            }
        });

        botonModificarMez.setFont(new java.awt.Font("Umpush", 1, 19)); // NOI18N
        botonModificarMez.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/ModificarIcono.png"))); // NOI18N
        botonModificarMez.setToolTipText("Modificar entidad banccaria seleccionada de la lista");
        botonModificarMez.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonModificarMezActionPerformed(evt);
            }
        });

        botonIncluirMez.setFont(new java.awt.Font("Umpush", 1, 19)); // NOI18N
        botonIncluirMez.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/AgregarIcono.png"))); // NOI18N
        botonIncluirMez.setToolTipText("Agregar una  nueva entidad");
        botonIncluirMez.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonIncluirMezActionPerformed(evt);
            }
        });

        String [] nomColMez = {"Producto", "Componente", "Cantidad","Unidad","Rdmto%",
            "","",""};
        Class[] typesMez = {java.lang.String.class, java.lang.String.class,
            java.lang.Double.class, java.lang.String.class,
            java.lang.Double.class, java.lang.Integer.class,
            java.lang.Integer.class, java.lang.Integer.class};
        modeloMez = new ModeloDeTabla(nomColMez, typesMez);
        tablaMezcla.setModel(modeloMez);
        tablaMezcla.setPreferredScrollableViewportSize(new Dimension(200,200));
        tablaMezcla.getColumnModel().getColumn(0).setMinWidth(300);
        tablaMezcla.getColumnModel().getColumn(0).setMaxWidth(300);
        tablaMezcla.getColumnModel().getColumn(1).setMinWidth(300);
        tablaMezcla.getColumnModel().getColumn(1).setMaxWidth(300);
        tablaMezcla.getColumnModel().getColumn(2).setMinWidth(80);
        tablaMezcla.getColumnModel().getColumn(2).setMaxWidth(80);
        tablaMezcla.getColumnModel().getColumn(3).setMinWidth(200);
        tablaMezcla.getColumnModel().getColumn(3).setMaxWidth(200);
        tablaMezcla.getColumnModel().getColumn(4).setMinWidth(80);
        tablaMezcla.getColumnModel().getColumn(4).setMaxWidth(80);
        tablaMezcla.getColumnModel().getColumn(5).setMinWidth(0);
        tablaMezcla.getColumnModel().getColumn(5).setMaxWidth(0);
        tablaMezcla.getColumnModel().getColumn(6).setMinWidth(0);
        tablaMezcla.getColumnModel().getColumn(6).setMaxWidth(0);
        tablaMezcla.getColumnModel().getColumn(7).setMinWidth(0);
        tablaMezcla.getColumnModel().getColumn(7).setMaxWidth(0);
        tablaMezcla.setModel(modeloMez);
        tablaMezcla.getTableHeader().setReorderingAllowed(false);
        tablaMezcla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaMezclaMouseClicked(evt);
            }
        });
        jScrollPane10.setViewportView(tablaMezcla);

        jPanel19.setBorder(javax.swing.BorderFactory.createTitledBorder("Producto"));

        javax.swing.GroupLayout jPanel19Layout = new javax.swing.GroupLayout(jPanel19);
        jPanel19.setLayout(jPanel19Layout);
        jPanel19Layout.setHorizontalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel19Layout.createSequentialGroup()
                .addComponent(comboProductosMezcla, javax.swing.GroupLayout.DEFAULT_SIZE, 384, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel19Layout.setVerticalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel19Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(comboProductosMezcla, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE))
        );

        cantidadComponente.setBorder(javax.swing.BorderFactory.createTitledBorder("Cantidad"));
        cantidadComponente.setMaxCantDigitos(6);

        redmtoCom.setBorder(javax.swing.BorderFactory.createTitledBorder("Rendmto%"));

        javax.swing.GroupLayout jPanel20Layout = new javax.swing.GroupLayout(jPanel20);
        jPanel20.setLayout(jPanel20Layout);
        jPanel20Layout.setHorizontalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel20Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(redmtoCom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel20Layout.setVerticalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel20Layout.createSequentialGroup()
                .addGap(0, 6, Short.MAX_VALUE)
                .addComponent(redmtoCom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout jPanel16Layout = new javax.swing.GroupLayout(jPanel16);
        jPanel16.setLayout(jPanel16Layout);
        jPanel16Layout.setHorizontalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel19, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cantidadComponente, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel20, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel16Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(botonIncluirMez)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botonModificarMez)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botonEliminarMez)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botonSalirMez)
                .addGap(329, 329, 329))
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addGap(94, 94, 94)
                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 952, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel16Layout.setVerticalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel19, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jPanel18, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(cantidadComponente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel20, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 440, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(botonEliminarMez)
                    .addComponent(botonSalirMez)
                    .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(botonIncluirMez)
                        .addComponent(botonModificarMez)))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pestanas.addTab("Mezcla de Productos", jPanel14);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(pestanas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 6, Short.MAX_VALUE)
                .addComponent(pestanas, javax.swing.GroupLayout.PREFERRED_SIZE, 668, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    private void botonIncluirUniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonIncluirUniActionPerformed
        String nombre = nombreUnidad.getContenido();
        String msj = "";

        if (nombre.length() == 0) {
            msj = "Falta el nombre de la unidad.\n";
        }

        if (msj.equals("")) {
            try {
                UnidadDeMedida entidad;
                UnidadDeMedidaBd entidadBd;
                Object[] datos = new Object[2];
                entidad = new UnidadDeMedida();
                entidad.setDescripcionUnidad(nombre);

                entidadBd = new UnidadDeMedidaBd(em, entidad);
                entidadBd.incluirUnidadDeMedida(entidad);
                List listaUnidades
                        = entidadBd.consultarUnidadDeMedidaPorNombre(entidad);
                Iterator iter = listaUnidades.iterator();
                while (iter.hasNext()) {
                    datos[1] = ((UnidadDeMedida) iter.next()).getIdUnidadMedida();
                }
                datos[0] = nombre;

                modeloUni.addRow(datos);
                nombreUnidad.setContenido("");
            } catch (EntidadYaExisteException eye) {
                msj = eye.getMessage();
                msj = msj + "\nEntidad a incluir ya existe."
                        + "\n El nombre no se puede repetir.";
                JOptionPane.showMessageDialog(this, msj);
            }
        } else
            JOptionPane.showMessageDialog(this, msj);
    }//GEN-LAST:event_botonIncluirUniActionPerformed
    private void botonModificarUniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonModificarUniActionPerformed
        int fila = tablaDeUnidades.getSelectedRow();
        int idEntidad;
        String nombre = nombreUnidad.getContenido();

        String msj = "";

        if (nombre.length() == 0) {
            msj = "Falta el nombre de la unidad.\n";
        }

        if (msj.equals("")) {
            try {
                UnidadDeMedida entidad;
                entidad = new UnidadDeMedida();
                entidad.setDescripcionUnidad(nombre);
                idEntidad = (int) tablaDeUnidades.getValueAt(fila, 1);

                em.getTransaction().begin();
                entidad = em.find(UnidadDeMedida.class, idEntidad);
                entidad.setDescripcionUnidad(nombre);
                em.getTransaction().commit();

                modeloUni.setValueAt(nombre, fila, 0);

                nombreUnidad.setContenido("");
            } catch (Exception ex) {
                msj = ex.getMessage();
                msj = msj + "\nUM a modificar no existe."
                        + "\nAtencion al Nombre.";
                JOptionPane.showMessageDialog(this, msj + "\n!! Revise !!");
            }
        } else
            JOptionPane.showMessageDialog(this, msj + "!! Revise !!");
    }//GEN-LAST:event_botonModificarUniActionPerformed
    private void botonEliminarUniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEliminarUniActionPerformed
        int fila = tablaDeUnidades.getSelectedRow();
        String nombre;
        int cod = 0, resp, idUnidad;
        String msj = "";

        if (fila >= 0) {
            idUnidad = (int) tablaDeUnidades.getValueAt(fila, 1);
            nombre = (String) tablaDeUnidades.getValueAt(fila, 0);

            msj = "La unidad de medida a eliminar es:\n"
                    + "\nNombre: " + nombre
                    + "\n. ¿De acuerdo?";

            resp = JOptionPane.showConfirmDialog(this, msj);
            if (resp == JOptionPane.OK_OPTION) {
                try {
                    UnidadDeMedida entidad = new UnidadDeMedida();
                    entidad.setIdUnidadMedida(idUnidad);
                    UnidadDeMedidaBd entidadBd
                            = new UnidadDeMedidaBd(em, entidad);
                    entidadBd.eliminarUnidadDeMedida(entidad);
                    msj = "Registro eliminado";
                    nombreUnidad.setContenido("");
                    modeloUni.removeRow(fila);
                } catch (EntidadYaExisteException
                        | EntidadNoExisteException ex) {
                    msj = ex.getMessage();
                    msj = msj + "La unidad de medida no se puede eliminar";
                }
                JOptionPane.showMessageDialog(this, msj);
            }
        }
    }//GEN-LAST:event_botonEliminarUniActionPerformed
    private void botonIncluirIngActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonIncluirIngActionPerformed
        String nombre = nombreIngrediente.getContenido();
        Double precio = precioIng.obtenerNumero();
        String unidad = comboUnidadMedida.getDatoSeleccionado();
        String msj = "";

        if (nombre.length() == 0) {
            msj = "Falta el nombre del ingrediente.\n";
        }
        if (precio == 0) {
            msj = msj + "\nEl  precio debe ser mayor a cero";
        }
        if (unidad.length() == 0) {
            msj = "Falta el unidad de medida.\n";
        }

        if (msj.equals("")) {
            try {
                Ingrediente entidad;
                IngredienteBd entidadBd;
                UnidadDeMedida unidadDeMedida;
                Object[] datos = new Object[5];
                entidad = new Ingrediente();
                entidad.setNombreIngrediente(nombre);
                entidad.setPrecio(BigDecimal.valueOf(precio));
                unidadDeMedida = new UnidadDeMedida();
                unidadDeMedida.setIdUnidadMedida(
                        comboUnidadMedida.getIdSeleccionado());
                unidadDeMedida.setDescripcionUnidad(unidad);
                entidad.setIdUnidadMedida(unidadDeMedida);
                entidad.setExistencia(BigDecimal.valueOf(0));
                entidadBd = new IngredienteBd(em, entidad);
                entidadBd.incluirIngrediente(entidad);
                List listaIngredientes
                        = entidadBd.consultarUnIngredientePorNombre(entidad);
                Iterator iter = listaIngredientes.iterator();
                while (iter.hasNext()) {

                    datos[3] = ((Ingrediente) iter.next()).getIdIngrediente();
                }
                datos[0] = nombre;
                datos[1] = precio;
                datos[2] = unidad;
                datos[4] = unidadDeMedida.getIdUnidadMedida();

                modeloIng.addRow(datos);
                nombreIngrediente.setContenido("");
                precioIng.actualizarNumero("");
                comboUnidadMedida.setIndexSeleccionado(0);
            } catch (EntidadYaExisteException eye) {
                msj = eye.getMessage();
                msj = msj + "\nIngrediente a incluir ya existe."
                        + "\n El nombre no se puede repetir.";
                JOptionPane.showMessageDialog(this, msj);
            }
        } else
            JOptionPane.showMessageDialog(this, msj);
    }//GEN-LAST:event_botonIncluirIngActionPerformed
    private void botonModificarIngActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonModificarIngActionPerformed
        String nombre = nombreIngrediente.getContenido();
        Double precio = precioIng.obtenerNumero();
        String unidad = comboUnidadMedida.getDatoSeleccionado();
        int idUnidad = comboUnidadMedida.getIdSeleccionado();
        int fila = tablaIngredientes.getSelectedRow();
        int idEntidad;

        String msj = "";

        if (nombre.length() == 0) {
            msj = "Falta el nombre del ingrediente.\n";
        }
        if (precio == 0) {
            msj = msj + "\nEl  precio debe ser mayor a cero";
        }
        if (unidad.length() == 0) {
            msj = "Falta el unidad de medida.\n";
        }

        if (msj.equals("")) {
            try {
                Ingrediente entidad = new Ingrediente();
                entidad.setNombreIngrediente(nombre);
                UnidadDeMedida uMedida;

                idEntidad = (int) tablaIngredientes.getValueAt(fila, 3);
                em.getTransaction().begin();
                entidad = em.find(Ingrediente.class, idEntidad);
                uMedida = em.find(UnidadDeMedida.class, idUnidad);
                entidad.setNombreIngrediente(nombre);
                entidad.setPrecio(BigDecimal.valueOf(precio));
                entidad.setIdUnidadMedida(uMedida);
                em.getTransaction().commit();

                modeloIng.setValueAt(nombre, fila, 0);
                modeloIng.setValueAt(precio, fila, 1);
                modeloIng.setValueAt(unidad, fila, 2);
                modeloIng.setValueAt(idUnidad, fila, 4);

                nombreIngrediente.setContenido("");
                precioIng.actualizarNumero("");
                comboUnidadMedida.setIndexSeleccionado(0);
                JOptionPane.showMessageDialog(this, "!! Listo !!");
            } catch (HeadlessException | IndexOutOfBoundsException ex) {
                msj = ex.getMessage();
                msj = msj + "\nUM a modificar no existe."
                        + "\nAtencion al Nombre.";
                JOptionPane.showMessageDialog(this, msj + "\n!! Revise !!");
            }
        } else
            JOptionPane.showMessageDialog(this, msj + "!! Revise !!");
    }//GEN-LAST:event_botonModificarIngActionPerformed
    private void botonEliminarIngActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEliminarIngActionPerformed
        int fila = tablaIngredientes.getSelectedRow();
        String nombre;
        int cod = 0, resp, idIngrediente;
        String msj = "";

        if (fila >= 0) {
            idIngrediente = (int) tablaIngredientes.getValueAt(fila, 3);
            nombre = (String) tablaIngredientes.getValueAt(fila, 0);

            msj = "El ingrediente a eliminar es:\n"
                    + "\nNombre: " + nombre
                    + "\n. ¿De acuerdo?";

            resp = JOptionPane.showConfirmDialog(this, msj);
            if (resp == JOptionPane.OK_OPTION) {
                try {
                    Ingrediente entidad = new Ingrediente();
                    entidad.setIdIngrediente(idIngrediente);
                    IngredienteBd entidadBd = new IngredienteBd(em, entidad);
                    entidadBd.eliminarIngrediente(entidad);
                    msj = "Registro eliminado";
                    nombreIngrediente.setContenido("");
                    modeloIng.removeRow(fila);
                } catch (EntidadYaExisteException
                        | EntidadNoExisteException ex) {
                    msj = ex.getMessage();
                    msj = msj + "El ingrediente no se puede eliminar";
                }
                JOptionPane.showMessageDialog(this, msj);
            }
        }
    }//GEN-LAST:event_botonEliminarIngActionPerformed
    private void botonEliminarProActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEliminarProActionPerformed
        int fila = tablaProducto.getSelectedRow();
        String nombre = nombreProducto.getContenido();
        int cod = 0, resp, idProducto;
        String msj = "";

        if (fila >= 0) {
            idProducto = (int) tablaProducto.getValueAt(fila, 3);
            nombre = (String) tablaProducto.getValueAt(fila, 0);

            msj = "El producto a eliminar es:\n"
                    + "\nNombre: " + nombre
                    + "\n. ¿De acuerdo?";

            resp = JOptionPane.showConfirmDialog(this, msj);
            if (resp == JOptionPane.OK_OPTION) {
                try {
                    Producto entidad = new Producto();
                    entidad.setIdProducto(idProducto);
                    ProductoBd entidadBd = new ProductoBd(em, entidad);
                    entidadBd.eliminarProducto(entidad);
                    msj = "Registro eliminado";
                    nombreProducto.setContenido("");
                    modeloPro.removeRow(fila);
                } catch (EntidadYaExisteException
                        | EntidadNoExisteException ex) {
                    msj = ex.getMessage();
                    msj = msj + "El producto no se puede eliminar";
                }
                JOptionPane.showMessageDialog(this, msj);
            }
        }
    }//GEN-LAST:event_botonEliminarProActionPerformed
    private void botonModificarProActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonModificarProActionPerformed
        String unidad = comboUnidad.getDatoSeleccionado();
        int idUnidad = comboUnidad.getIdSeleccionado();
        int fila = tablaProducto.getSelectedRow();
        String pro = procedimiento.getText();
        String nombre = nombreProducto.getContenido();
        int idEntidad;

        String msj = "";

        if (nombre.length() == 0) {
            msj = "Falta el nombre del producto.\n";
        }
        if (unidad.length() == 0) {
            msj = msj + "\nFalta el nombre del ingrediente.";
        }
        if (pro.length() == 0) {
            msj = "Debe indicar el procedimiento de elaboracion.\n";
        }

        if (msj.equals("")) {
            try {
                Producto entidad = new Producto();
                UnidadDeMedida uMedida;

                idEntidad = (int) tablaProducto.getValueAt(fila, 3);
                em.getTransaction().begin();
                entidad = em.find(Producto.class, idEntidad);
                uMedida = em.find(UnidadDeMedida.class, idUnidad);
                entidad.setNombreProducto(nombre);
                entidad.setIdUnidadDeMedida(uMedida);
                entidad.setProcedimiento(pro);
                em.getTransaction().commit();

                modeloPro.setValueAt(nombre, fila, 0);
                modeloPro.setValueAt(pro, fila, 1);
                modeloPro.setValueAt(unidad, fila, 2);
                modeloPro.setValueAt(idEntidad, fila, 3);
                modeloPro.setValueAt(idUnidad, fila, 4);

                nombreProducto.setContenido("");
                procedimiento.setText("");
                comboUnidad.setIndexSeleccionado(0);
                JOptionPane.showMessageDialog(this, "!! Listo !!");
            } catch (HeadlessException | IndexOutOfBoundsException ex) {
                msj = ex.getMessage();
                msj = msj + "\nUM a modificar no existe."
                        + "\nAtencion al Nombre.";
                JOptionPane.showMessageDialog(this, msj + "\n!! Revise !!");
            }
        } else
            JOptionPane.showMessageDialog(this, msj + "!! Revise !!");
    }//GEN-LAST:event_botonModificarProActionPerformed
    private void botonIncluirProActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonIncluirProActionPerformed
        String nombre = nombreProducto.getContenido();
        String proc = procedimiento.getText();
        int idUnidad = comboUnidad.getIdSeleccionado();
        String unidad = comboUnidad.getDatoSeleccionado();
        String msj = "";

        if (nombre.length() == 0) {
            msj = "Falta el nombre del ingrediente.\n";
        }
        if (proc.length() == 0) {
            msj = msj + "\nDebe indicar el procedimiento de elaboracion";
        }
        if (idUnidad == 0) {
            msj = "Falta el unidad de medida.\n";
        }

        if (msj.equals("")) {
            try {
                Producto entidad;
                Producto auxiliar;
                ProductoBd entidadBd;
                UnidadDeMedida unidadDeMedida;
                Object[] datos = new Object[5];
                entidad = new Producto();
                entidad.setNombreProducto(nombre);
                entidad.setProcedimiento(proc);
                entidad.setExistenciaProducto(BigDecimal.valueOf(0));
                unidadDeMedida = em.find(UnidadDeMedida.class, idUnidad);
                entidad.setIdUnidadDeMedida(unidadDeMedida);

                entidadBd = new ProductoBd(em, entidad);
                entidadBd.incluirProducto(entidad);
                List listaIngredientes
                        = entidadBd.consultarUnProductoPorNombre(entidad);
                Iterator iter = listaIngredientes.iterator();
                while (iter.hasNext()) {
                    auxiliar = (Producto) iter.next();
                    datos[0] = nombre;
                    datos[1] = proc;
                    datos[2] = unidad;
                    datos[3] = auxiliar.getIdProducto();
                    datos[4] = entidad.getIdUnidadDeMedida().getIdUnidadMedida();
                }

                modeloPro.addRow(datos);
                nombreProducto.setContenido("");
                procedimiento.setText("");
                comboUnidad.setIndexSeleccionado(0);
            } catch (EntidadYaExisteException eye) {
                msj = eye.getMessage();
                msj = msj + "\nProducto a incluir ya existe."
                        + "\n El nombre no se puede repetir.";
                JOptionPane.showMessageDialog(this, msj);
            }
        } else
            JOptionPane.showMessageDialog(this, msj);
    }//GEN-LAST:event_botonIncluirProActionPerformed
    private void botonEliminarRecActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEliminarRecActionPerformed
        int fila = tablaReceta.getSelectedRow();
        String nomPro = (String) tablaReceta.getValueAt(fila, 0);
        int idPro = (int) tablaReceta.getValueAt(fila, 6);
        String nomIng = (String) tablaReceta.getValueAt(fila, 1);
        int idIng = (int) tablaReceta.getValueAt(fila, 7);
        int idProIng = (int) tablaReceta.getValueAt(fila, 5);
        int resp;
        String msj = "";

        if (fila >= 0) {
            msj = "La combinacion Producto/Ingrediente a eliminar es:"
                    + "\n" + nomPro + "/" + nomIng
                    + "\n. ¿De acuerdo?";
            resp = JOptionPane.showConfirmDialog(this, msj);
            if (resp == JOptionPane.OK_OPTION) {
                try {
                    Receta entidad = new Receta();
                    entidad.setIdProdIngrediente(idProIng);
                    RecetaBd entidadBd = new RecetaBd(em, entidad);
                    entidadBd.eliminarReceta(entidad);
                    msj = "Registro eliminado";
                    comboProductosRec.setIndexSeleccionado(0);
                    comboIngredientesRec.setIndexSeleccionado(0);
                    cantidadIng.actualizarNumero("");
                    rendimientoRec.actualizarNumero("");
                    modeloRec.removeRow(fila);
                } catch (EntidadYaExisteException
                        | EntidadNoExisteException ex) {
                    msj = ex.getMessage();
                    msj = msj
                            + "\nEl componente de la receta no se puede eliminar";
                }
                JOptionPane.showMessageDialog(this, msj);
            }
        }
    }//GEN-LAST:event_botonEliminarRecActionPerformed
    private void botonModificarRecActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonModificarRecActionPerformed
        String nomPro = comboProductosRec.getDatoSeleccionado();
        String nomIng = comboIngredientesRec.getDatoSeleccionado();
        int idPro = comboProductosRec.getIdSeleccionado();
        int idIng = comboIngredientesRec.getIdSeleccionado();
        double cantIng = cantidadIng.obtenerNumero();
        double rdmto = rendimientoRec.obtenerNumero();
        int fila = tablaReceta.getSelectedRow();
        int idEntidad;
        String msj = "";

        if (nomPro.length() == 0) {
            msj = "Falta el nombre del producto.\n";
        }
        if (nomIng.length() == 0) {
            msj = msj + "\nFalta el nombre del ingrediente.";
        }
        if (cantIng == 0) {
            msj = msj + "\nLa cantidad de ingrediente debe ser mayor a cero.";
        }
        if (rdmto == 0 | rdmto > 100) {
            msj = msj + "\nEl rendimiento % debe ser mayor a cero y maximo 100.\n";
        }

        if (msj.equals("")) {
            try {
                Receta entidad = new Receta();
                Producto producto;
                Ingrediente ingrediente;

                idEntidad = (int) tablaReceta.getValueAt(fila, 5);
                em.getTransaction().begin();
                entidad = em.find(Receta.class, idEntidad);
                producto = em.find(Producto.class, idPro);
                ingrediente = em.find(Ingrediente.class, idIng);

                entidad.setCantidadUsada(BigDecimal.valueOf(cantIng));
                entidad.setRendimiento(BigDecimal.valueOf(rdmto));
                entidad.setIdProducto(producto);
                entidad.setIdIngrediente(ingrediente);
                em.getTransaction().commit();

                modeloRec.setValueAt(nomPro, fila, 0);
                modeloRec.setValueAt(nomIng, fila, 1);
                modeloRec.setValueAt(cantIng, fila, 2);
                modeloRec.setValueAt(ingrediente.getIdUnidadMedida().
                        getDescripcionUnidad(), fila, 3);
                modeloRec.setValueAt(rdmto, fila, 4);
                modeloRec.setValueAt(idEntidad, fila, 5);
                modeloRec.setValueAt(idPro, fila, 6);
                modeloRec.setValueAt(idIng, fila, 7);
                modeloRec.setValueAt(ingrediente.getIdUnidadMedida().
                        getIdUnidadMedida(), fila, 8);

                comboIngredientesRec.setIndexSeleccionado(0);
                comboProductosRec.setIndexSeleccionado(0);
                cantidadIng.actualizarNumero("");
                rendimientoRec.actualizarNumero("");
                JOptionPane.showMessageDialog(this, "!! Listo !!");
            } catch (HeadlessException | IndexOutOfBoundsException ex) {
                msj = ex.getMessage();
                msj = msj + "\nNo se puede modificar esta combinacion Pro-Ing";
                JOptionPane.showMessageDialog(this, msj + "\n!! Revise !!");
            }
        } else
            JOptionPane.showMessageDialog(this, msj + "!! Revise !!");
    }//GEN-LAST:event_botonModificarRecActionPerformed
    private void botonIncluirRecActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonIncluirRecActionPerformed
        String nombrePro = comboProductosRec.getDatoSeleccionado();
        String nombreIng = comboIngredientesRec.getDatoSeleccionado();
        int idPro = comboProductosRec.getIdSeleccionado();
        int idIng = comboIngredientesRec.getIdSeleccionado();
        double cantidad = cantidadIng.obtenerNumero();
        double rdmto = rendimientoRec.obtenerNumero();
        String msj = "";

        if (nombrePro.length() == 0) {
            msj = "Falta el nombre del producto.\n";
        }
        if (nombreIng.length() == 0) {
            msj = msj + "\nFalta el nombre del ingrediente.";
        }
        if (cantidad == 0) {
            msj = "\nFalta el cantidad de ingrediente.\n";
        }

        if (msj.equals("")) {
            try {
                Receta entidad;
                Receta auxiliar;
                RecetaBd entidadBd;
                Ingrediente ingrediente;
                Producto producto;
                Object[] datos = new Object[9];
                ingrediente = em.find(Ingrediente.class, idIng);
                producto = em.find(Producto.class, idPro);
                entidad = new Receta();
                entidad.setIdIngrediente(ingrediente);
                entidad.setIdProducto(producto);
                entidad.setRendimiento(BigDecimal.valueOf(rdmto));
                entidad.setCantidadUsada(BigDecimal.valueOf(cantidad));

                entidadBd = new RecetaBd(em, entidad);
                entidadBd.incluirReceta(entidad);
                List listaRecetas
                        = entidadBd.consultarUnaRecetaPorIds(entidad);
                Iterator iter = listaRecetas.iterator();
                while (iter.hasNext()) {
                    auxiliar = (Receta) iter.next();
                    datos[0] = nombrePro;
                    datos[1] = nombreIng;
                    datos[2] = cantidad;
                    datos[3] = entidad.getIdIngrediente().getIdUnidadMedida().
                            getDescripcionUnidad();
                    datos[4] = rdmto;
                    datos[5] = auxiliar.getIdProdIngrediente();
                    datos[6] = idPro;
                    datos[7] = idIng;
                    datos[8] = entidad.getIdIngrediente().getIdUnidadMedida().
                            getIdUnidadMedida();
                    modeloRec.addRow(datos);
                }
                comboProductosRec.setIndexSeleccionado(0);
                comboIngredientesRec.setIndexSeleccionado(0);
                cantidadIng.actualizarNumero("");
                rendimientoRec.actualizarNumero("");
            } catch (EntidadYaExisteException eye) {
                msj = eye.getMessage();
                msj = msj + "\nReceta a incluir ya existe.";
                JOptionPane.showMessageDialog(this, msj);
            }
        } else
            JOptionPane.showMessageDialog(this, msj);
    }//GEN-LAST:event_botonIncluirRecActionPerformed
    private void botonEliminarMezActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEliminarMezActionPerformed
        int fila = tablaMezcla.getSelectedRow();
        String nomPro = (String) tablaMezcla.getValueAt(fila, 0);
        int idPro = (int) tablaMezcla.getValueAt(fila, 6);
        String nomCom = (String) tablaMezcla.getValueAt(fila, 1);
        int idCom = (int) tablaMezcla.getValueAt(fila, 7);
        int idMezcla = (int) tablaMezcla.getValueAt(fila, 5);
        int resp;
        String msj = "";

        if (fila >= 0) {
            msj = "La combinacion Producto/Componente a eliminar es:"
                    + "\n" + nomPro + "/" + nomCom
                    + "\n. ¿De acuerdo?";
            resp = JOptionPane.showConfirmDialog(this, msj);
            if (resp == JOptionPane.OK_OPTION) {
                try {
                    MezclaDeProductos entidad = new MezclaDeProductos();
                    entidad.setIdMezcla(idMezcla);
                    MezclaDeProductosBd entidadBd
                            = new MezclaDeProductosBd(em, entidad);
                    entidadBd.eliminarMezclaDeProductos(entidad);
                    msj = "Registro eliminado";
                    comboProductosMezcla.setIndexSeleccionado(0);
                    comboComponentes.setIndexSeleccionado(0);
                    cantidadComponente.actualizarNumero("");
                    redmtoCom.actualizarNumero("");
                    modeloMez.removeRow(fila);
                } catch (EntidadYaExisteException
                        | EntidadNoExisteException ex) {
                    msj = ex.getMessage();
                    msj = msj
                            + "\nLa combinacion Producto/Componente no se puede eliminar";
                }
                JOptionPane.showMessageDialog(this, msj);
            }
        }
    }//GEN-LAST:event_botonEliminarMezActionPerformed
    private void botonModificarMezActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonModificarMezActionPerformed
        String nomPro = comboProductosMezcla.getDatoSeleccionado();
        String nomCom = comboComponentes.getDatoSeleccionado();
        int idPro = comboProductosMezcla.getIdSeleccionado();
        int idCom = comboComponentes.getIdSeleccionado();
        double cantCom = cantidadComponente.obtenerNumero();
        double rdmto = redmtoCom.obtenerNumero();
        int fila = tablaMezcla.getSelectedRow();
        int idEntidad;
        String msj = "";

        if (nomPro.length() == 0) {
            msj = "Falta el nombre del producto.\n";
        }
        if (nomCom.length() == 0) {
            msj = msj + "\nFalta el nombre del componente.";
        }
        if (cantCom == 0) {
            msj = msj + "\nLa cantidad del componente debe ser mayor a cero.";
        }
        if (rdmto == 0 | rdmto > 100) {
            msj = msj + "\nEl rendimiento % debe ser mayor a cero y maximo 100.";
        }

        if (msj.equals("")) {
            try {
                MezclaDeProductos entidad = new MezclaDeProductos();
                Producto producto;
                Producto componente;

                idEntidad = (int) tablaMezcla.getValueAt(fila, 5);
                em.getTransaction().begin();
                entidad = em.find(MezclaDeProductos.class, idEntidad);
                producto = em.find(Producto.class, idPro);
                componente = em.find(Producto.class, idCom);

                entidad.setCantidadUsada(BigDecimal.valueOf(cantCom));
                entidad.setRendimiento(BigDecimal.valueOf(rdmto));
                entidad.setIdProducto(producto);
                entidad.setIProductoMezcla(componente);
                em.getTransaction().commit();

                modeloMez.setValueAt(nomPro, fila, 0);
                modeloMez.setValueAt(nomCom, fila, 1);
                modeloMez.setValueAt(cantCom, fila, 2);
                modeloMez.setValueAt(componente.getIdUnidadDeMedida().
                        getDescripcionUnidad(), fila, 3);
                modeloMez.setValueAt(rdmto, fila, 4);
                modeloMez.setValueAt(idEntidad, fila, 5);
                modeloMez.setValueAt(idPro, fila, 6);
                modeloMez.setValueAt(idCom, fila, 7);

                comboProductosMezcla.setIndexSeleccionado(0);
                comboComponentes.setIndexSeleccionado(0);
                cantidadComponente.actualizarNumero("");
                redmtoCom.actualizarNumero("");
                JOptionPane.showMessageDialog(this, "!! Listo !!");
            } catch (HeadlessException | IndexOutOfBoundsException ex) {
                msj = ex.getMessage();
                msj = msj + "\nNo se puede modificar esta combinacion Pro-Comp";
                JOptionPane.showMessageDialog(this, msj + "\n!! Revise !!");
            }
        } else
            JOptionPane.showMessageDialog(this, msj + "!! Revise !!");
    }//GEN-LAST:event_botonModificarMezActionPerformed
    private void botonIncluirMezActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonIncluirMezActionPerformed
        String nombrePro = comboProductosMezcla.getDatoSeleccionado();
        String nombreCom = comboComponentes.getDatoSeleccionado();
        int idPro = comboProductosMezcla.getIdSeleccionado();
        int idCom = comboComponentes.getIdSeleccionado();
        double cantidad = cantidadComponente.obtenerNumero();
        double rdmto = redmtoCom.obtenerNumero();
        String msj = "";

        if (nombrePro.length() == 0) {
            msj = "Falta el nombre del producto.\n";
        }
        if (nombreCom.length() == 0) {
            msj = msj + "\nFalta el nombre del Componente.";
        }
        if (cantidad == 0) {
            msj = "\nFalta el cantidad del componente.\n";
        }
        if (rdmto == 0 | rdmto > 100) {
            msj = msj + "\nEl rendimiento % debe ser mayor a cero y maximo 100.";
        }

        if (msj.equals("")) {
            try {
                MezclaDeProductos entidad;
                MezclaDeProductos auxiliar;
                MezclaDeProductosBd entidadBd;
                Producto componente;
                Producto producto;
                Object[] datos = new Object[8];
                componente = em.find(Producto.class, idCom);
                producto = em.find(Producto.class, idPro);
                entidad = new MezclaDeProductos();
                entidad.setIProductoMezcla(componente);
                entidad.setIdProducto(producto);
                entidad.setRendimiento(BigDecimal.valueOf(rdmto));
                entidad.setCantidadUsada(BigDecimal.valueOf(cantidad));

                entidadBd = new MezclaDeProductosBd(em, entidad);
                entidadBd.incluirMezclaDeProductos(entidad);
                List listaMezclas = entidadBd.consultarUnaMezclaPorIds(entidad);
                Iterator iter = listaMezclas.iterator();
                while (iter.hasNext()) {
                    auxiliar = (MezclaDeProductos) iter.next();
                    datos[0] = nombrePro;
                    datos[1] = nombreCom;
                    datos[2] = cantidad;
                    datos[3] = entidad.getIProductoMezcla().
                            getIdUnidadDeMedida().getDescripcionUnidad();
                    datos[4] = rdmto;
                    datos[5] = auxiliar.getIdMezcla();
                    datos[6] = idPro;
                    datos[7] = idCom;
                    modeloMez.addRow(datos);
                }
                comboProductosMezcla.setIndexSeleccionado(0);
                comboComponentes.setIndexSeleccionado(0);
                cantidadComponente.actualizarNumero("");
                redmtoCom.actualizarNumero("");
                JOptionPane.showMessageDialog(this, "!! Listo !!");
            } catch (EntidadYaExisteException eye) {
                msj = eye.getMessage();
                msj = msj + "\nMezcla de productos a incluir ya existe.";
                JOptionPane.showMessageDialog(this, msj);
            }
        } else
            JOptionPane.showMessageDialog(this, msj);
    }//GEN-LAST:event_botonIncluirMezActionPerformed
    private void jPanel15CaretPositionChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_jPanel15CaretPositionChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jPanel15CaretPositionChanged
    private void botonSalirMezComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_botonSalirMezComponentShown
        // TODO add your handling code here:
    }//GEN-LAST:event_botonSalirMezComponentShown
    private void pestanasStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_pestanasStateChanged
        int tabSeleccionado = pestanas.getSelectedIndex();
        switch (tabSeleccionado) {
            case 0:
                cargarUnidadDeMedida();
                break;
            case 1:
                cargaComboUnidad();
                cargarIngrediente();
                break;
            case 2:
                cargaComboUnidad();
                cargarProducto();
                break;
            case 3:
                cargaComboProducto();
                cargaComboIngrediente();
                cargarReceta();
                break;
            case 4:
                cargaComboProducto();
                cargarMezclaDeProductos();
                break;
        }
    }//GEN-LAST:event_pestanasStateChanged
    private void tablaDeUnidadesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaDeUnidadesMouseClicked
        int fila = tablaDeUnidades.getSelectedRow();
        if (fila >= 0) {
            nombreUnidad.setContenido((String) (tablaDeUnidades.getValueAt(fila, 0)));
        }
    }//GEN-LAST:event_tablaDeUnidadesMouseClicked
    private void tablaIngredientesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaIngredientesMouseClicked
        int fila = tablaIngredientes.getSelectedRow();
        if (fila >= 0) {
            nombreIngrediente.setContenido((String) (tablaIngredientes.getValueAt(fila, 0)));
            precioIng.actualizarNumero(""
                    + tablaIngredientes.getValueAt(fila, 1));
            fila = (int) tablaIngredientes.getValueAt(fila, 4);
            fila = comboUnidadMedida.cualEsElIndiceDe(fila);
            comboUnidadMedida.setIndexSeleccionado(fila);
        }
    }//GEN-LAST:event_tablaIngredientesMouseClicked
    private void BotonSalir(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonSalir
        setEnabled(false);
        dispose();
    }//GEN-LAST:event_BotonSalir
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened

    }//GEN-LAST:event_formWindowOpened
    private void tablaProductoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaProductoMouseClicked
        int fila = tablaProducto.getSelectedRow();
        if (fila >= 0) {
            nombreProducto.setContenido((String) (tablaProducto.getValueAt(fila, 0)));
            procedimiento.setText((String) (tablaProducto.getValueAt(fila, 1)));
            fila = (int) tablaProducto.getValueAt(fila, 4);
            fila = comboUnidad.cualEsElIndiceDe(fila);
            comboUnidad.setIndexSeleccionado(fila);
        }
    }//GEN-LAST:event_tablaProductoMouseClicked
    private void tablaRecetaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaRecetaMouseClicked
        int fila = tablaReceta.getSelectedRow();
        int idPro, idIng;

        if (fila >= 0) {
            idPro = (int) tablaReceta.getValueAt(fila, 6);
            idIng = (int) tablaReceta.getValueAt(fila, 7);
            idPro = comboProductosRec.cualEsElIndiceDe(idPro);
            comboProductosRec.setIndexSeleccionado(idPro);
            idIng = comboIngredientesRec.cualEsElIndiceDe(idIng);
            comboIngredientesRec.setIndexSeleccionado(idIng);
            cantidadIng.actualizarNumero("" + tablaReceta.getValueAt(fila, 2));
            rendimientoRec.actualizarNumero(""
                    + tablaReceta.getValueAt(fila, 4));
        }
    }//GEN-LAST:event_tablaRecetaMouseClicked
    private void tablaMezclaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaMezclaMouseClicked
        int fila = tablaMezcla.getSelectedRow();
        int idPro, idCom;

        if (fila >= 0) {
            idPro = (int) tablaMezcla.getValueAt(fila, 6);
            idCom = (int) tablaMezcla.getValueAt(fila, 7);
            idPro = comboProductosMezcla.cualEsElIndiceDe(idPro);
            comboProductosMezcla.setIndexSeleccionado(idPro);
            idCom = comboComponentes.cualEsElIndiceDe(idCom);
            comboComponentes.setIndexSeleccionado(idCom);
            cantidadComponente.actualizarNumero(""
                    + tablaMezcla.getValueAt(fila, 2));
            redmtoCom.actualizarNumero(""
                    + tablaMezcla.getValueAt(fila, 4));
        }
    }//GEN-LAST:event_tablaMezclaMouseClicked
    public void cargarUnidadDeMedida() {
        modeloUni.setRowCount(0);
        Object[] datos = new Object[2];
        UnidadDeMedida uMedida = new UnidadDeMedida();
        UnidadDeMedida auxiliar;
        UnidadDeMedidaBd entidad = new UnidadDeMedidaBd(em, uMedida);
        List<UnidadDeMedida> listaUnidades = entidad.consultarUnidadesDeMedida();
        Iterator iter = listaUnidades.iterator();
        while (iter.hasNext()) {
            auxiliar = (UnidadDeMedida) iter.next();
            datos[0] = auxiliar.getDescripcionUnidad();
            datos[1] = auxiliar.getIdUnidadMedida();
            modeloUni.addRow(datos);
        }
    }

    public void cargarIngrediente() {
        modeloIng.setRowCount(0);
        Object[] datos = new Object[5];
        Ingrediente ingrediente = new Ingrediente();
        Ingrediente auxiliar;
        IngredienteBd entidad = new IngredienteBd(em, ingrediente);
        List<Ingrediente> listaIngredientes = entidad.consultarIngredientes();
        Iterator iter = listaIngredientes.iterator();
        while (iter.hasNext()) {
            auxiliar = (Ingrediente) iter.next();
            datos[0] = auxiliar.getNombreIngrediente();
            datos[1] = auxiliar.getPrecio();
            datos[2] = auxiliar.getIdUnidadMedida().getDescripcionUnidad();
            datos[3] = auxiliar.getIdIngrediente();
            datos[4] = auxiliar.getIdUnidadMedida().getIdUnidadMedida();
            modeloIng.addRow(datos);
        }
    }

    public void cargarProducto() {
        modeloPro.setRowCount(0);
        Object[] datos = new Object[5];
        Producto producto = new Producto();
        Producto auxiliar;
        ProductoBd entidad = new ProductoBd(em, producto);
        List<Producto> listaProductos = entidad.consultarProductos();
        Iterator iter = listaProductos.iterator();
        while (iter.hasNext()) {
            auxiliar = (Producto) iter.next();
            datos[0] = auxiliar.getNombreProducto();
            datos[1] = auxiliar.getProcedimiento();
            datos[2] = auxiliar.getIdUnidadDeMedida().getDescripcionUnidad();
            datos[3] = auxiliar.getIdProducto();
            datos[4] = auxiliar.getIdUnidadDeMedida().getIdUnidadMedida();
            modeloPro.addRow(datos);
        }
    }

    public void cargarReceta() {
        modeloRec.setRowCount(0);
        Object[] datos = new Object[9];
        Receta receta = new Receta();
        Receta auxiliar;
        RecetaBd entidad = new RecetaBd(em, receta);
        List<Receta> listaRecetas = entidad.consultarRecetas();
        Iterator iter = listaRecetas.iterator();
        while (iter.hasNext()) {
            auxiliar = (Receta) iter.next();
            datos[0] = auxiliar.getIdProducto().getNombreProducto();
            datos[1] = auxiliar.getIdIngrediente().getNombreIngrediente();
            datos[2] = auxiliar.getCantidadUsada();
            datos[3] = auxiliar.getIdIngrediente().getIdUnidadMedida().
                    getDescripcionUnidad();
            datos[4] = auxiliar.getRendimiento();
            datos[5] = auxiliar.getIdProdIngrediente();
            datos[6] = auxiliar.getIdProducto().getIdProducto();
            datos[7] = auxiliar.getIdIngrediente().getIdIngrediente();
            datos[8] = auxiliar.getIdIngrediente().getIdUnidadMedida()
                    .getIdUnidadMedida();
            modeloRec.addRow(datos);
        }
    }

    public void cargarMezclaDeProductos() {
        modeloMez.setRowCount(0);
        Object[] datos = new Object[8];
        MezclaDeProductos mezcla = new MezclaDeProductos();
        MezclaDeProductos auxiliar;
        MezclaDeProductosBd entidad = new MezclaDeProductosBd(em, mezcla);
        List<MezclaDeProductos> listaRecetas = entidad.consultarMezcla();
        Iterator iter = listaRecetas.iterator();
        while (iter.hasNext()) {
            auxiliar = (MezclaDeProductos) iter.next();
            datos[0] = auxiliar.getIdProducto().getNombreProducto();
            datos[1] = auxiliar.getIProductoMezcla().getNombreProducto();
            datos[2] = auxiliar.getCantidadUsada();
            datos[3] = auxiliar.getIProductoMezcla().getIdUnidadDeMedida().
                    getDescripcionUnidad();
            datos[4] = auxiliar.getRendimiento();
            datos[5] = auxiliar.getIdMezcla();
            datos[6] = auxiliar.getIdProducto().getIdProducto();
            datos[7] = auxiliar.getIProductoMezcla().getIdProducto();
            modeloMez.addRow(datos);
        }
    }

    public void cargaComboUnidad() {
        TreeSet<DataCombo> datos = new TreeSet();
        DataCombo data;
        UnidadDeMedida uMedida = new UnidadDeMedida();
        UnidadDeMedida auxiliar;
        UnidadDeMedidaBd entidad = new UnidadDeMedidaBd(em, uMedida);
        List<UnidadDeMedida> listaUnidades = entidad.consultarUnidadesDeMedida();
        Iterator iter = listaUnidades.iterator();
        while (iter.hasNext()) {
            auxiliar = (UnidadDeMedida) iter.next();
            data = new DataCombo();
            data.setIdData(auxiliar.getIdUnidadMedida());
            data.setData(auxiliar.getDescripcionUnidad());
            datos.add(data);
        }
        comboUnidadMedida.setDatos(datos);
        comboUnidad.setDatos(datos);
    }

    public void cargaComboProducto() {
        TreeSet<DataCombo> datos = new TreeSet();
        DataCombo data;
        Producto producto = new Producto();
        Producto auxiliar;
        ProductoBd entidad = new ProductoBd(em, producto);
        List<Producto> listaProductos = entidad.consultarProductos();
        Iterator iter = listaProductos.iterator();
        while (iter.hasNext()) {
            auxiliar = (Producto) iter.next();
            data = new DataCombo();
            data.setIdData(auxiliar.getIdProducto());
            data.setData(auxiliar.getNombreProducto());
            datos.add(data);
        }
        comboProductosRec.setDatos(datos);
        comboProductosMezcla.setDatos(datos);
        comboComponentes.setDatos(datos);
    }

    public void cargaComboIngrediente() {
        TreeSet<DataCombo> datos = new TreeSet();
        DataCombo data;
        Ingrediente ingrediente = new Ingrediente();
        Ingrediente auxiliar;
        IngredienteBd entidad = new IngredienteBd(em, ingrediente);
        List<Ingrediente> listaIngredientes = entidad.consultarIngredientes();
        Iterator iter = listaIngredientes.iterator();
        while (iter.hasNext()) {
            auxiliar = (Ingrediente) iter.next();
            data = new DataCombo();
            data.setIdData(auxiliar.getIdIngrediente());
            data.setData(auxiliar.getNombreIngrediente());
            datos.add(data);
        }
        comboIngredientesRec.setDatos(datos);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonEliminarIng;
    private javax.swing.JButton botonEliminarMez;
    private javax.swing.JButton botonEliminarPro;
    private javax.swing.JButton botonEliminarRec;
    private javax.swing.JButton botonEliminarUni;
    private javax.swing.JButton botonIncluirIng;
    private javax.swing.JButton botonIncluirMez;
    private javax.swing.JButton botonIncluirPro;
    private javax.swing.JButton botonIncluirRec;
    private javax.swing.JButton botonIncluirUni;
    private javax.swing.JButton botonModificarIng;
    private javax.swing.JButton botonModificarMez;
    private javax.swing.JButton botonModificarPro;
    private javax.swing.JButton botonModificarRec;
    private javax.swing.JButton botonModificarUni;
    private javax.swing.JButton botonSalirIng;
    private javax.swing.JButton botonSalirMez;
    private javax.swing.JButton botonSalirPro;
    private javax.swing.JButton botonSalirReceta;
    private javax.swing.JButton botonSalirUni;
    private Gui.CampoDoble campoDoble2;
    private Gui.CampoDoble cantidadComponente;
    private Gui.CampoDoble cantidadIng;
    private Gui.ComboDatos comboComponentes;
    private Gui.ComboDatos comboIngredientesRec;
    private Gui.ComboDatos comboProductosMezcla;
    private Gui.ComboDatos comboProductosRec;
    private Gui.ComboDatos comboUnidad;
    private Gui.ComboDatos comboUnidadMedida;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable4;
    private Gui.CampoTexto nombreIngrediente;
    private Gui.CampoTexto nombreProducto;
    private Gui.CampoTexto nombreUnidad;
    private javax.swing.JPanel panelNombre;
    private javax.swing.JTabbedPane pestanas;
    private Gui.CampoDoble precioIng;
    private javax.swing.JTextArea procedimiento;
    private Gui.CampoDoble redmtoCom;
    private Gui.CampoDoble rendimientoRec;
    private javax.swing.JTable tablaDeUnidades;
    private javax.swing.JTable tablaIngredientes;
    private javax.swing.JTable tablaMezcla;
    private javax.swing.JTable tablaProducto;
    private javax.swing.JTable tablaReceta;
    // End of variables declaration//GEN-END:variables
}
